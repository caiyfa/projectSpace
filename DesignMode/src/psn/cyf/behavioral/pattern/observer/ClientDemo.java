package psn.cyf.behavioral.pattern.observer;

/**
 * 观察者 模式（ Observer Pattern） 也称 发布 订阅 模式， 它是 一种 在 项目 中经 常使 用的 模式。
 *定义 对象 间 一种 一对 多的 依赖 关系， 使得 每当 一个 对象 改变 状态，
 * 则 所有 依赖于 它的 对象 都会 得到 通知 并被 自动 更新。
 *观察者 模式 具有 以下 4 个 角色。
 * ■ 　 抽象 主题（ Subject） 角色： 该 角色 又称 为“ 被 观察者”， 可以 增加 和 删除 观察者 对象。
 * ■ 　 抽象 观察者（ Observer） 角色： 该 角色 为所 有的 具体 观察者 定义 一个 接口， 在 得到 主题 的
 * 通知 时 更新 自己。
 * ■ 　 具体 主题（ Concrete Subject） 角色： 该 角色 又称 为“ 具体 被 观察者”， 它将 有关 状态 存入
 * 具体 观察者 对象， 在 具体 主题 的 内部 状态 改变 时， 给 所有 登 记过 的 观察者发出通知。
 * ■ 　 具体 观察者（ Concrete Observer） 角色： 该 角色 实现 抽象 观察者 所 要求 的 更新 接口，
 * 以便 使 自身 的 状态 与 主题 的 状态 相 协调。
 *1． 观察者 模式 的 优缺点 观察者 模式 具有 以下 几个 优点。
 * ■ 　 观察者 和 被 观察者 之间 是 抽象 耦合。 被 观察者 角色 所 知道 的 只是 一个 具体 观察者 集合，
 * 每一个 具体 观察者 都 符合 一个 抽象 观察者 的 接口。 被 观察者 并不 认识 任何 一个 具体 的 观察者，
 * 它 只 知道 它们 都有 一个 共同 的 接口。 由于 被 观察者 和 观察者 没有 紧密 的 耦合 在一起，
 * 因此 它们 可以 属于 不同 的 抽象化 层次， 且 都 非常 容易 扩展。
 * ■ 　 支持 广播 通信。 被 观察者 会 向 所有 登 记过 的 观察者 发出通知， 这就 是一 个 触发 机制，
 * 形成 一个 触发 链。
 * 观察 模式 的 缺点 如下。
 * ■ 　 如果 一个 主题 有多 个 直接 或间接 的 观察者， 则 通知 所有 的 观察者 会 花费 很多 时间，
 * 且 开发 和 调试 都比 较 复杂。
 * ■ 　 如果 在 主题 之间 有 循环 依赖， 被 观察者 会 触发 它们 之间 进行 循环 调用，
 * 导致 系统 崩溃。 在 使用 观察者 模式 时 要 特别 注意 这一点。
 * ■ 　 如果 对 观察者 的 通知 是 通过 另外 的 线程 进行 异步 投递， 系统 必须 保证 投递 的 顺序 执行。
 * ■ 　 虽然 观察者 模式 可以 随时 使 观察者 知道 所 观察 的 对象 发生了 变化， 但是 观察者
 * 模式 没有 提供 相应 的 机制 使 观察者 知道 所 观察 的 对象 是 如何 发生 变化。
 *2． 观察者 模式 的 应用 场景 使用 观察 模式 的 典型 应用 场景 如下。
 * ■ 　 关联 行为 场景。
 * ■ 　 事件 多级 触发 场景。
 * ■ 　 跨 系统 的 消息 交换 场景， 如 消息 队列 的 处理 机制。
 *3． 观察者 模式 的 注意事项 观察者 模式 的 注意事项 如下。
 *■ 　 广播 链 的 问题。 一个 观察者 可以 有 双重身份， 既是 观察者 也是 被 观察者，
 * 广播 链 一旦 建立， 逻辑 就比 较 复杂， 可维护性 非常 差。 一般 在 一个 观察者 模式 中最
 * 多 出现 一个 对象 既是 观察者 也是 被 观察者， 这样 消息 最多 转发 一次（ 传递 两次）， 较易 控制。
 * ■ 　 异步 处理 的 问题。 异步 处理 就要 考虑 线程 安全 和 队列 的 问题。
 *注意 　 观察者 广播 链 和 责任 链 模式 的 最大 区别 就是 观察者 广播 链 在 传播 的 过程中，
 *  消息 是 随时 更改 的， 是由 相邻 的 两个 节点 协商 的 消息 结构； 而 责任 链 模式 在 消息 传递
 *  过程中， 消息 是 保持 不变 的， 如果 要 改变， 也 只有 在 原有 消息 上进 行 修正。
 *
 *
 */
public class ClientDemo {
    public static void main(String[] args) {
        Button button =new Button("白色",0,0);
        button.addClickableObserver(new ChangeColorObserver());
        button.addClickableObserver(new ChangeCoordinateObserver());
        button.addClickableObserver(new OtherObserver());
        button.click();
        System.out.println(button.toString());
    }
}
