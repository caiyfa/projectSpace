package psn.cyf.behavioral.pattern.strategy;

/**
 * 策略 模式（ Strategy Pattern） 也叫 政策 模式，
 *定义 一组 算法， 将 每个 算法 都 封装 起来， 并且 使它 们 之间 可以互换。
 * 其 用意 是 针对 一组 算法， 将 每一个 算法 封装 到 具有 共同 接口 的 独立 的 类 中，
 * 从而 使得 它们 可以 相互 替换， 使得 算法 可 以在 不 影响 到 客户 端 的 情况下 发生 变化。
 *策略 模式 涉及 以下 3 个 角色。
 * ■ 　 环境（ Context） 角色： 该 角色 也叫 上下文 角色， 起到 承上启下 的 作用，
 * 屏蔽 高层模块 对 策略、 算法 的 直接 访问， 它 持有 一个 Strategy 类 的 引用。
 * ■ 　 抽象 策略（ Strategy） 角色： 该 角色 对 策略、 算法 进行 抽象， 通常 定义
 * 每个 策略 或 算法 必须 具有 的 方法 和 属性。
 * ■ 　 具体 策略（ Concrete Strategy） 角色： 该 角色 实现 抽象 策略 中的 具体 操作，
 * 含有 具体 的 算法。
 *1． 策略 模式 的 优点 策略 模式 的 优点 有 以下 几个 方面。
 * ■ 　 策略 模式 提供 了 管理 相关 的算法 族 的 办法。 策略 类 的 等级 结构
 * 定义 了 一个 算法 或 行为 族， 恰当 地 使用 继承 可以 把 公共 的 代码 移到
 * 父 类 中， 从而 避免 代码 重复。
 * ■ 　 策略 模式 提供 了 可以 替换 继承 关系 的 办法。 继承 可以 处理 多种
 * 算法 或 行为， 如果 不用 策略 模式， 那么 使用 算法 或 行为 的 环境 类 就
 * 可能 会有 一些 子类， 每一个 子类 提供 一个 不同 的 算法 或 行为。 但是，
 * 这样 算法 或 行为 的 使用者 就 和 算法 本身 混在 一起， 从而 不可 能再 独立 演化。
 * ■ 　 使用 策略 模式 可以避免 使用 多重 条件 转移 语句。 多重 转移转移 语句 不易
 * 维护， 它 把 采取 哪一种 算法 或 采取 哪一种 行为 的 逻辑 与 算法 或 行为 的 逻辑
 * 混合 在一起， 统统 列 在 一个 多重 转移 语句 里面， 这 比 使用 继承 的 办法 还要
 * 原始 和 落后。
 * 2． 策略 模式 的 缺点 策略 模式 的 缺点 如下。
 * ■ 　 客户 端 必须 知道 所有 的 策略 类， 并 自行 决定 使用 哪一个 策略 类。
 * 这就 意味着 客户 端 必须 理解 这些 算法 的 区别， 以便 适时 选择 恰当 的 算法 类，
 * 即 策略 模式 只 适用于 客户 端知道 所有 的 算法 或 行为 的 情况。
 * ■ 　 策略 模式 造成 很多 的 策略 类。 有时候 可以 通过 把 依赖于 环境 的
 * 状态 保持 到 客户 端 里面， 而将 策略 类 设计 成 可 共享 的， 这样 策略 类
 * 实例 可以 被 不同 客户 端 使用。 可以 使用 享 元 模式 来 减少 对象 的 数量。
 * 3． 策略 模式 的 应用 场景 使用 策略 模式 的 典型 场景 如下。
 * ■ 　 多个 类 只是 在 算法 或 行为 上 稍有 不同 的 场景。
 * ■ 　 算法 需要 自由 切换 的 场景。
 *■ 　 需要 屏蔽 算法 规则 的 场景。
 *
 */
public class ClientDemo {
    /*使用 图书 销售 中 不同 的 折扣 算法 演示 策略 模式。 本 实例 中有 3 种 折扣 算法。
     ■ 　 算法 1： 对 有些 图书 没有 折扣， 即 折扣 算法 中 折扣 值 为 0。
     ■ 　 算法 2： 对 有些 图书 的 折扣 是 固定 值 为 1 元。
     ■ 　 算法 3： 对 有些 图书 的 折扣 是 15％。
     首先， 对这 3 种 算法 使用 DiscountStrategy 类 进行 抽象， 然后 使用 3 个 具体 算法 类 继承 这个 类.*/
    public static void main(String[] args) {
        DiscountStrategy strategy=new NoDiscountStrategy(48.5,20);
        System.out.println("0 折扣"+strategy.calculateDiscount());
        DiscountStrategy strategy1=new FixDiscountStrategy(46,60);
        System.out.println("固定折扣"+strategy1.calculateDiscount());
        DiscountStrategy strategy2=new PercentageDiscountStrategy(38,40);
        System.out.println("15% 折扣"+strategy2.calculateDiscount());
    }
}
