package psn.cyf.behavioral.pattern.templateMethod;

/**
 * 模板方法模式
 * 意思是： 定义 一个 操作 中的 算法 的 框架， 而将 一些 步骤 延迟 到 子类 中。
 * 使得 子类 可以 不改 变 一个 算法 的 结构 即可 重 定义 该 算法 的 某些 特定 步骤。
 *模板 方法 模式 涉及 两个 角色。
 * ■ 　 抽象 模板（ Abstract Template） 角色： 该 角色 定义 一个 或 多个 抽象 操作， 以便 让 子类 实现；
 * 这些 抽象 操作 是 基本 操作， 是 一个 顶 级 逻辑 的 组成 步骤。 还需 要 定义 并 实现 一个 或 几个 模板 方法，
 * 这些 模板 方法 一般 是 具体 方法， 即 一个 框架， 实现 对 基本 方法 的 调度， 完成 固定 的 逻辑。
 * ■ 　 具体 模板（ Concrete Template） 角色： 该 角色 实现 抽象 模板 中 定义 的 一个 或 多个 抽象 方法，
 * 每一个 抽象 模板 角色 都可以 有 任意 多个具体 模板 角色 与之 对应，
 * 而每 一个 具体 模板 角色 都可以 给出 这些 抽象 方法 的 不同 实现，
 * 从而 使得 顶 级 逻辑 的 实现 各不相同。
 *1.模板 方法 模式 的 优点 有 以下 几个 方面。
 * ■ 　 封装 不变 的 部分， 扩展 可变 部分。 不变 的 部分 封 装到 父 类 中 实现，
 * 而可 变的 部分 则 可以 通过 继承 进行 扩展。
 * ■ 　 提取 公共 部分 代码， 便于 维护。 将 公共 部分 的 代码 抽取 出来 放在 父 类 中，
 * 维护 时 只需 要 修改 父 类 中的 代码。
 * ■ 　 行 为由 父 类 控制， 子类 实现。 模板 方法 模式 中的 基本 方法 是由 子类 实现 的，
 * 因此 子类 可以 通过 扩展 增加 相应 的 功能， 符合 开闭 原则。
 *2． 模板 方法 模式 的 应用 场景 使用 模板 方法 模式 的 典型 场景 如下。
 * ■ 　 多个 子类 有 公共 方法， 并且 逻辑 基本 相同 时。
 * ■ 　 可以 把 重要的、 复杂 的、 核心 算法 设计 为 模板 方法， 周边 的 相关 细节 功能 则由 各个 子类 实现。
 * ■ 　 重 构 时， 模板 方法 模式 是一 个 经常 使用 的 模式， 将 相同 的 代码 抽取 到 父 类 中。
 *
 * 青岛东合信息技术有限公司. 设计模式（Java版） (p. 114). 电子工业出版社. Kindle 版本.
 *
 */
public class ClientDemo {
    public static void main(String[] args) {
        Account account=new DemandAccount();
        System.out.println("活期利息"+account.calculateInterest());
        account=new FixedAccount();
        System.out.println("定期利息"+account.calculateInterest());
    }
}
