package psn.cyf.behavioral.pattern.mediator;

/**
 * 中介 者 模式（ Mediator） 也称 调停者 模式.
 * 用 一个 中介 对象 封装 一系列 对象（ 同事） 的 交互， 中介 者 使 各 对象 不需要 显 式 地 相互作用，
 * 从而 使其 耦合 松散， 而且 可以 独立 地 改变 它们 之间 的 交互。
 * ■ 　 抽象 中介 者（ Mediator） 角色： 该 角色 定义 出 同事 对象 到 中介 者 对象 的 统一 接口，
 * 用于 各 同事 角色 之间 的 通信。
 * ■ 　 具体 中介 者（ Concrete Mediator） 角色： 该 角色 实现 抽象 中介 者， 它 依赖于 各个
 * 同事 角色， 并 通过 协调 各 同事 角色 实现 协作 行为。
 * ■ 　 抽象 同事（ Colleague） 角色： 该 角色 定义 出 中介 者 到 同事 对象 的 接口， 同事
 * 对象 只 知道 中介 者 而 不知道 其余 的 同事 对象。
 * ■ 　 具体 同事（ Concrete Colleague） 角色： 该 角色实现 抽象 同事 类， 每一个 具体
 * 同事 类 都 清楚 自己 在 小 范围内 的 行为， 而 不知道 大 范围内 的 目的。
 * <p>
 * 1． 中介 者 模式 的 优缺点
 * 中介 者 模式 具有 以下 几个 优点。
 * ■ 　 减少 类 间的 依赖， 将 原有 的 一对 多的 依赖 变成 一对一 的 依赖， 使得 对象
 * 之间 的 关系 更易 维护 和 理解。
 * ■ 　 避免 同事 对象 之间 过度 耦合， 同事 类 只 依赖于 中介 者， 使 同事 类 更 易被
 * 复 用， 中介 类 和 同事 类 可以 相对 独立 地 演化。
 * ■ 　 中介 者 模式 将 对象 的 行为 和 协作 抽象化， 将对 象在 小 尺度 的 行为 上
 * 与其 他 对象 的 相互作用 分开 处理。
 * 中介 者 模式 的 缺点 如下。
 * ■ 　 中介 者 模式 降低 了 同事 对象 的 复杂性， 但 增加 了 中介 者 类 的 复杂性。
 * ■ 　 中介 者 类 经常 充满 了 各个 具体 同事 类 的 关系 协调 代码， 这种 代码 是 不能 复 用的。
 * 2． 中介 者 模式 的 注意事项 中介 者 模式 简单， 但是 简单 不 代表 容易 使用，
 * 它 很容易 被 误用 和 滥用。 在 面向 对象 的 编程 中， 对象 和 对象 之间 必然
 * 会有 依赖 关系， 如果 某个 类 和 其他 类 没有 任何 相互 依赖 的 关系，
 * 那 这个 类 就是 一个 孤岛， 在 系统 中就 没有 存在 的 必要。 一个 类 依赖 多个 类 的 情况
 * 也是 正常 的， 存在 就 有其 合理性，并不是 只要 有多 个 依赖 关系 就 考虑 使用 中介 者 模式。
 * 在下列 几种 情况下 不适合 使用 中介 者 模式。
 * ■ 　 不 应当 在 责任 划分 混乱 时 使用。 通常 情况下， 一个 初级 设计师 在 面向 对象 的
 * 技术 不熟悉 时， 会使 一个 系统 在 责任 的 分割 上 发生 混乱。 责任 分割 的 混乱 会使 得
 * 系统 中的 对象 与 对象 之间 产生 不适当 的 复杂 关系。
 * ■ 　 不应 当 对 数据 类 和 方法 类 使用。 初级 设计师 常常 会 设计 出 这样 一种 系统，
 * 让 一系列 类 只 含有 数据， 另 一些 类 只 含有 方法。 例如， 描述 一个 客户 时， 这些
 * 设计师 首先 设计 出 一个“ 客户 数据” 类， 只 含有 客户 数据； 另外 再 设计 一个 类
 * 叫做“ 管理 类”， 含有 操作 客户 以及 此 客户 购买 公司 产品、 付账 的 方法。
 * 管理 类 自然 会 涉及 其 他的 类， 诸如 产品 数据 类、 订单 数据 类、 付账 数据 类、
 * 应收 账 数据 类 等。 这不 是一 种 好的 设计 方式， 也不 是 中介 者 模式。
 * ■ 　 正确理解 封装。 封装 首先 是 行为， 以及 行为 所 涉及 的 状态 的 封装。
 * 行为 与 状态 是 不应该 分 割开 的。
 * 中介 者 模式 的 用途 是 管理 很多 的 对象 的 相互作用， 以便 使 这些 对象 可以 专注 于 自身 的 行为。
 * <p>
 * 青岛东合信息技术有限公司. 设计模式（Java版） (p. 145). 电子工业出版社. Kindle 版本.
 * <p>
 * 青岛东合信息技术有限公司. 设计模式（Java版） (p. 145). 电子工业出版社. Kindle 版本.
 * <p>
 * 青岛东合信息技术有限公司. 设计模式（Java版） (p. 145). 电子工业出版社. Kindle 版本.
 * 青岛东合信息技术有限公司. 设计模式（Java版） (p. 145). 电子工业出版社. Kindle 版本.
 * 青岛东合信息技术有限公司. 设计模式（Java版） (p. 145). 电子工业出版社. Kindle 版本.
 */
public class ClientDemo {
    public static void main(String[] args) {
        MarriageAgency agency = new MarriageAgencyImpl();
        Person m1 = new Man(" John", 20, 18, agency);
        Person m2 = new Man("Mike", 27, 25, agency);
        Person w1 = new Woman(" Mary", 25, 27, agency);
        Person w2 = new Woman(" Jane", 20, 22, agency);
        m1.findPartner();
        m2.findPartner();

    }
}
