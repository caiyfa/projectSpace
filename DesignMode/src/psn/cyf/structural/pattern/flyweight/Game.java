package psn.cyf.structural.pattern.flyweight;

/**
 * 享 元 模式（ Flyweight Pattern） 是 池 技术 的 重要 实现 方式， 可以 降低 大量 重复 的、 细 粒度 的 类 在内 存 中的 开销。
 *享 元 模式 是以 共享 的 方式 高效 地支 持 大量 的 细粒 度 对象。
 *      享 元 对象 能做 到 共享 的 关键 是 区分 内部 状态（ Internal State） 和 外部 状态（ External State）。
 *■ 　 内部 状态 是 存储 在 享 元 对象 内部 的、 可以 共享 的 信息， 并且 不会 随 环境 改变 而 改变。
 * ■ 　 外部 状态 是 随 环境 改变 而 改变 且不 可以 共享 的 状态。
 *  享 元 对象 的 外部 状态 必须 由 客户 端 保存， 并在 享 元 对象 被 创建 之后， 在 需要 使用 的 时候 再 传入 到 享 元 对象 内部。
 *  享 元 模式 具有 以下 4 个 角色。
 *  ■ 　 抽象 享 元（ Flyweight） 角色： 该 角色 对 享 元 类 进行 抽象，
 *      需要 外部 状态 的 操作 可以 通过 参数 的 形式 将 外部 状态 传入。
 *  ■ 　 具体 享 元（ ConcreteFlyweight） 角色： 该 角色 实现 抽象 享 元 定义 的 业务，
 *      注意 享 元 对象 的 内部 状态 必须 与 环境 无关， 从而 使得 享 元 对象 可以 在 系统 内 共享。
 *■ 　 享 元 工厂（ FlyweightFactory） 角色： 该 角色 就是 构造 一个 池 容器， 负责 创建 和 管理 享 元 角色，
 * 并 提供 从 池 容器 中 获得 对象 的 方法， 保证 享 元 对象 可以 被 系统 适当 的 共享。
 * 当 一个 客户 端 对象 请求 一个 享 元 对象 时， 享 元 工厂 角色 会 检查 系统 中 是否 已经 有一个 符合 要求 的 享 元 对象。
 * 如果 已经 有了， 享 元 工厂 则 提供 这个 已 有的 享 元 对象； 否则 创建 一个 合适 的 享 元 对象。
 *■ 　 客户 端（ Client） 角色： 该 角色 需要 自行 存储 所有 享 元 对象 的 外部 状态。
 *注意 　 除了 上面 4 个 角色， 享元 模式 还会 涉及 复合 享 元 角色， 该 角色 是将 一些 单纯 享 元 使用 合成 模式 加以 复合，
 *  形成 复合 享 元 对象， 这些 复合 的 享 元 对象 本身 不能 共享，
 *  不会 出 现在 享 元 工厂 中， 因此 也称 为“ 不可 共享 的 享 元 角色”。
 *  但可以 将 复合 享 元 对象 分解 成 单纯 的 享 元 对象， 而 后者 则 可以 共享。
 *
 * 1． 享 元 模式 的 优缺点 享 元 模式 的 优点 在于 大幅 减少 内存 中 对象 的 数量， 降低 程序 内存 的 占用， 提高 性能。
 *  但是， 相应 付出 的 代价 也 很高。
 * ■ 　 享 元 模式 增加 了 系统 的 复杂性， 需要 分出 外部 状态 和 内部 状态， 而且 内部 状态 具有 固化 特性，
 * 不应该 随 外部 状态 改变 而 改变， 这使 得 程序 的 逻辑 复杂化。
 ■ 　 享 元 模式 将 享 元 对象 的 状态 外部 化， 而 读取 外部 状态 使得 运行 时间 变长。
 2． 享 元 模式 的 使用 场景 使用 享 元 模式 的 典型 场景 如下。
 ■ 　 系统 中有 大量 的 相似 对象， 这些 对象 耗费 大量 的 内存。
 ■ 　 细 粒度 的 对象 都 具备 较 接近 的 外部 状态， 而且 内部 状态 与 环境 无关， 即对 象 没有 特定 身份。
 ■ 　 需要 缓冲 池 的 场景。

 青岛东合信息技术有限公司. 设计模式（Java版） (pp. 105-106). 电子工业出版社. Kindle 版本.

 */
public class Game {
    public static void main(String[] args) {
        Chesspiece p1=ChesspieceFactory.getChesspiece("黑");
        p1.put(1,1);
        Chesspiece p2=ChesspieceFactory.getChesspiece("白");
        p2.put(2,2);
        Chesspiece p3=ChesspieceFactory.getChesspiece("黑");
        p3.put(1,3);
        Chesspiece p4=ChesspieceFactory.getChesspiece("白");
        p4.put(2,4);
        Chesspiece p5=ChesspieceFactory.getChesspiece("黑");
        p5.put(1,5);
        Chesspiece p6=ChesspieceFactory.getChesspiece("白");
        p6.put(2,6);
    }
}
