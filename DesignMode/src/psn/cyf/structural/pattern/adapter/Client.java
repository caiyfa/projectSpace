package psn.cyf.structural.pattern.adapter;

/**
 * 适配器模式又叫做 变压器 模式，
 *适配器 模式 就是 将 一个 接口 或 类 转换 成 其他 的 接口 或 类， 适配器 相当于 一个 包装 器，
 *适配器 模式 涉及 以下 3 个 角色。
 * ■ 　 目标（ Target） 角色： 该 角色 定义 要 转 换成 的 目标 接口。
 *■ 　 源（ Adaptee） 角色： 需要 被 转换 成 目标 角色 的 源 角色。
 * ■ 　 适配器（ Adapter） 角色： 该 角色 是 适配器 模式 的 核心，
 * 其 职责 是 通过 继承 或是 类 关联 的 方式， 将 源 角色 转换 为 目标 角色。
 *1． 适配器 模式 的 优点 适配器 模式 的 优点 有 以下 几个 方面。
 * ■ 　 适配器 模式 可以 让 两个 没有 任何 关系 的 类 在一起 运行。
 * ■ 　 增 加了 类 的 透明 性。
 * ■ 　 提高 类 的 复 用度。
 * ■ 　 增强 代码 的 灵活性。
 *适配器 模式 的 使用 场景 使用 适配器 的 典型 场景：
 * 修改 一个 已经 投产 中的 系统 时， 需要 对 系统 进行 扩展，
 * 此时 使用 一个 已 有的 类， 但 这个 类 不符合 系统 中的 接口，
 * 这时 使用 适配器 模式 是最 合适 的， 它可 以 将不 符合 系统 接口 的 类 进行 转换，
 * 转换 成 符合 系统 接口 的、 可以 使 用的 类。
 *
 * 青岛东合信息技术有限公司. 设计模式（Java版） (p. 83). 电子工业出版社. Kindle 版本.
 */
public class Client {
    public static void main(String[] args) {
        Huntun huntun=new FoodAdapter();
        huntun.makeHuntun();
    }
}
