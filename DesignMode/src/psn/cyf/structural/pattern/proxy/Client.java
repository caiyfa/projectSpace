package psn.cyf.structural.pattern.proxy;

/**
 * 代理 模式 提供 以下 3 个 角色。
 * ■ 　 抽象 主题（ Subject） 角色： 该 角色 是真 实 主题 和 代理 主题 的 共同 接口，
 * 以便 在任 何 可以 使用 真实 主题  的 地方 都可以 使用 代理 主题。
 * ■ 　 代理 主题（ Proxy Subject） 角色： 也叫 做 委托 类、 代理 类，
 * 该 角色 负责 控制 对 真实 主题 的 引用， 负责 在 需要 的 时候 创建 或 删除 真实 主题 对象，
 * 并且 在 真实 主题 角色 处理 完毕 前后 做 预处理 和 善后处理 工作。
 * ■ 　 真实 主题（ Real Subject） 角色： 该 角色 也 叫做 被 委托 角色、 被 代理 角色， 是 业务 逻辑 的 具体 执行者。
 *1． 代理 模式 的 种类 按照 使用 目的 可以 将 代理 划分 为 以下 几种。
 * ■ 　 远程（ Remote） 代理： 为 一个 位于 不同 的 地址 空间 的 对象 提供 一个 局部 代表 对象。
 * 这个 不同 的 地址 空间 可以 是在 本 机器 中， 也可以 在另 一台 机器 中。
 * ■ 　 虚拟（ Virtual） 代理： 有时 需要 创建 一些 消耗 较多 资源 的 对象， 可以 首先 创建 代理 对象，
 * 而将 真实 对象 的 创建 延迟。 例如， 加载 一个 很大 的 图片， 可以 通过 图片 的 代理 来 代替 真正 的 图片。
 * ■ 　 保护（ Protect or Access） 代理： 控制 对 一个 对象 的 访问， 如果 需要， 可以 给 不同 的 用户 提供 不同 级别 的 使用 权限。
 * ■ 　 缓存（ Cache） 代理： 为 某一个 目标 操作 的 结果 提供 临时 的 存储 空间， 以便 多个 客户 端 可以 共享 这些 结果。
 *
 *■ 　 同步（ Synchronization） 代理： 使 几个 用户 能够 同时 使用 一个 对象 而 没有 冲突。
 *■ 　 智能 引用（ Smart Reference） 代理： 当 一个 对象 被 引用 时， 提供 一些 额外 的 操作，
 *例如， 记录 访问 的 流量 和 次数 等。
 *注意 　 在 所有 种类 的 代理 模式 中， 虚拟 代理、 远程 代理、 智能 引用 代理 和 保护 代理 是最 为 常见 的 代理 模式。
 * 代理 模式 的 优点 有 以下 几个 方面。
 * ■ 　 职责 清晰： 真实 的 角色 实现 实际 的 业务 逻辑， 不用 关心 其他 非 本职 的 事务，
 * 通过 后期 的 代理 完成 附加 的 事务， 附带 的 结果 就是 编程 简洁 清晰。
 * ■ 　 高 扩展性： 具体 主题 角色 随 需求 不同 可能 有很 多种， 但 只要 实现 了 接口，
 * 代理 类 就 完全可以 在 不做 任何 修改 的 情况下 代理 各种 真实 主题 角色。
 * ■ 　 智能 化： 代理 类 可以 在 运行时 才 确定 需要 去 代理 的
 *3． 代理 模式 的 使用 场景 代理 模式 应用 非常 广泛，
 * 大 到 一个 系统 框架、 企业 平台， 小到 事务处理、 代码 片段，
 * 随处可见 代理 模式 的 使用，
 * 例如， Java RMI 的 远程 调用 就是 一种 代理 模式 的 应用， 现在 流行 的 AOP 也可以 通过 代理 模式 实现。
 *
 * 青岛东合信息技术有限公司. 设计模式（Java版） (p. 76). 电子工业出版社. Kindle 版本.
 * 青岛东合信息技术有限公司. 设计模式（Java版） (p. 75). 电子工业出版社. Kindle 版本.
 */
public class Client {
    public static void main(String[] args) {
        IGamePlayer player=new GamePlayer("神游");
        IGamePlayer proxy=new GamePlayerProxy(player);
        proxy.killBoss();
        proxy.killBoss();
        proxy.upGrade();
        proxy.killBoss();
        proxy.killBoss();
        proxy.killBoss();
        proxy.killBoss();
        proxy.upGrade();

    }
}
